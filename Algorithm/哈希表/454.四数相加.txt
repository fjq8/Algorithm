class Solution {
    public int fourSumCount(int[] A, int[] B, int[] C, int[] D) {
        Map<Integer, Integer> map = new HashMap();
        for(int k = 0; k < C.length; k++) {
            for(int l = 0; l < D.length; l++) {
                int sum = C[k] + D[l];
                map.put(sum, map.getOrDefault(sum, 0) + 1);
            }
        }

        int res = 0;
        for(int i = 0; i < A.length; i++) {
            for(int j = 0; j < B.length; j++) {
                res += map.getOrDefault(-1 * (A[i] + B[j]), 0);
            }
        }
        return res;
    }
}

分析： 
时间复杂度：O(n^2) 
空间复杂度：O(n^2)

先找到C、D数组中所有和的可能，map中key放的是所有和的值，value是这个值出现的次数，遇到一次就+1；

之后，在map中找和为-(A+B)的值，取得value。